local imgur = require "example.imgur"

local sharpen1 = {
	-1, -1, -1,
	-1,  9, -1,
	-1, -1, -1,
}

local sharpen2 = {
	 0, -1,  0,
	-1,  5, -1,
	 0, -1,  0,
}

local emboss = {
	-2, -1,  0,
	-1,  1,  1,
	 0,  1,  2,
}

local edgedetection = {
	 0, -1,  0,
	-1,  4, -1,
	 0, -1,  0,
}

local boxblur = {
	1/9, 1/9, 1/9,
	1/9, 1/9, 1/9,
	1/9, 1/9, 1/9,
}

local gaussianblur = {
	1/16, 2/16, 1/16,
	2/16, 4/16, 2/16,
	1/16, 2/16, 1/16,
}


local function update_texture(buffer, textureheader)
	local resource_path = go.get("#sprite", "texture0")
	resource.set_texture(resource_path, textureheader, buffer)
end


function init(self)
	math.randomseed(os.time())
	self.kernel = nil
	msg.post(".", "acquire_input_focus")

	if camera then
		local sysinfo = sys.get_sys_info()
		local quality = camera.CAPTURE_QUALITY_HIGH
		local camera_type = camera.CAMERA_TYPE_FRONT
		if sysinfo.system_name == 'iPhone OS' then
			camera_type = camera.CAMERA_TYPE_BACK
			quality = camera.CAPTURE_QUALITY_MEDIUM
		end

		if camera.start_capture(camera_type, quality) then
			local camerainfo = camera.get_info()
			pprint(camerainfo)

			self.src_buffer = camera.get_frame()

			self.src_header = {
				width = camerainfo.width,
				height = camerainfo.height,
				type = resource.TEXTURE_TYPE_2D,
				format = resource.TEXTURE_FORMAT_RGB,
				num_mip_maps = 1 }

			self.dst_buffer = buffer.create(
				camerainfo.width * camerainfo.height,
				{ { name = hash("rgb"), type = buffer.VALUE_TYPE_UINT8, count = camerainfo.bytes_per_pixel } })
		end
	else
		imgur.refresh(function(success)
			if not success then
				print("Unable to get images from Imgur")
				return
			end

			local images = imgur.get_images()
			if #images == 0 then
				print("No images returned")
				return
			end

			local image = images[math.random(1, #images)]
			http.request(image.link, "GET", function(self, id, response)
				if response.status == 200 or response.status == 304 then
					local buf, w, h = png.decode_rgb(response.response)
					 self.src_buffer = buf
					 self.src_header = {
						 width = w,
						 height = h,
						 type = resource.TEXTURE_TYPE_2D,
						 format = resource.TEXTURE_FORMAT_RGB,
						 num_mip_maps = 1 }

					self.dst_buffer = buffer.create(
						w * h,
						{ { name = hash("rgb"), type = buffer.VALUE_TYPE_UINT8, count = 3 } })
				else
					print("Error while downloading image. Response code", response.status)
				end
			end)
		end)

	end

end

function final(self)
	if camera  then
		camera.stop_capture()
	end
end

function update(self, dt)
	if self.src_buffer then
		if self.kernel then
			imp.apply(self.src_buffer, self.dst_buffer, self.src_header.width, self.src_header.height, self.kernel)
			update_texture(self.dst_buffer, self.src_header)
		else
			update_texture(self.src_buffer, self.src_header)
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("nokernel") and action.released then
		print("none")
		self.kernel = nil
	elseif action_id == hash("kernel1") and action.released then
		print("emboss")
		self.kernel = emboss
	elseif action_id == hash("kernel2") and action.released then
		print("sharpen")
		self.kernel = sharpen2
	elseif action_id == hash("kernel3") and action.released then
		print("box blur")
		self.kernel = boxblur
	elseif action_id == hash("kernel4") and action.released then
		print("gaussian blur")
		self.kernel = gaussianblur
	elseif action_id == hash("kernel5") and action.released then
		print("edge detection")
		self.kernel = edgedetection
	end
end
