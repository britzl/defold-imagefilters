local imgur = require "example.imgur"

local sharpen1 = {
	-1, -1, -1,
	-1,  9, -1,
	-1, -1, -1,
}

local sharpen2 = {
	 0, -1,  0,
	-1,  5, -1,
	 0, -1,  0,
}

local emboss = {
	-2, -1,  0,
	-1,  1,  1,
	 0,  1,  2,
}

local edgedetection = {
	 0, -1,  0,
	-1,  4, -1,
	 0, -1,  0,
}

local boxblur = {
	1/9, 1/9, 1/9,
	1/9, 1/9, 1/9,
	1/9, 1/9, 1/9,
}

local gaussianblur = {
	1/16, 2/16, 1/16,
	2/16, 4/16, 2/16,
	1/16, 2/16, 1/16,
}


local function update_sprite(buffer, w, h) 
	local resource_path = go.get("#sprite", "texture0")
	local header = { width = w, height = h, type = resource.TEXTURE_TYPE_2D, format = resource.TEXTURE_FORMAT_RGBA, num_mip_maps = 1 }
	resource.set_texture(resource_path, header, buffer)
end


local function apply_filter(self, filter)
	local buffer = imp.apply(self.original_buffer, self.w, self.h, filter)
	update_sprite(buffer, self.w, self.h)
end
 
function init(self)
	math.randomseed(os.time())

	imgur.refresh(function(success)
		if not success then
			print("Unable to get images from Imgur")
			return
		end

		local images = imgur.get_images()
		if #images == 0 then
			print("No images returned")
			return
		end

		local image = images[math.random(1, #images)]
		http.request(image.link, "GET", function(self, id, response)
			if response.status == 200 or response.status == 304 then
				msg.post(".", "acquire_input_focus")
				self.original_buffer, self.w, self.h = png.decode_rgba(response.response)
				update_sprite(self.original_buffer, self.w, self.h)
			else
				print("Error while downloading image. Response code", response.status)
			end
		end)
	end)
end


function on_input(self, action_id, action)
	if action_id == hash("nofilter") and action.released then
		print("original")
		update_sprite(self.original_buffer, self.w, self.h)
	elseif action_id == hash("filter1") and action.released then
		print("emboss")
		apply_filter(self, emboss)
	elseif action_id == hash("filter2") and action.released then
		print("sharpen")
		apply_filter(self, sharpen2)
	elseif action_id == hash("filter3") and action.released then
		print("box blur")
		apply_filter(self, boxblur)
	elseif action_id == hash("filter4") and action.released then
		print("gaussian blur")
		apply_filter(self, gaussianblur)
	elseif action_id == hash("filter5") and action.released then
		print("edge detection")
		apply_filter(self, edgedetection)
	end
end
